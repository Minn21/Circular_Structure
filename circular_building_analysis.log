2025-01-17 13:26:34,390 - dash.dash - INFO - Dash is running on http://127.0.0.1:8052/

2025-01-17 13:52:10,978 - dash.dash - INFO - Dash is running on http://127.0.0.1:8052/

2025-01-17 13:56:41,764 - dash.dash - INFO - Dash is running on http://127.0.0.1:8052/

2025-01-17 13:58:48,553 - __main__ - ERROR - Error during analysis: name 'theta_columns' is not defined
2025-01-17 13:59:58,462 - __main__ - ERROR - Error during analysis: Invalid property specified for object of type plotly.graph_objs.Scatter3d: 'clickmode'

Did you mean "mode"?

    Valid properties:
        connectgaps
            Determines whether or not gaps (i.e. {nan} or missing
            values) in the provided data arrays are connected.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        error_x
            :class:`plotly.graph_objects.scatter3d.ErrorX` instance
            or dict with compatible properties
        error_y
            :class:`plotly.graph_objects.scatter3d.ErrorY` instance
            or dict with compatible properties
        error_z
            :class:`plotly.graph_objects.scatter3d.ErrorZ` instance
            or dict with compatible properties
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.scatter3d.Hoverlabel`
            instance or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available.  Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets text elements associated with each (x,y,z)
            triplet. If a single string, the same string appears
            over all the data points. If an array of string, the
            items are mapped in order to the this trace's (x,y,z)
            coordinates. To be seen, trace `hoverinfo` must contain
            a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.scatter3d.Legendgrouptitle
            ` instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        line
            :class:`plotly.graph_objects.scatter3d.Line` instance
            or dict with compatible properties
        marker
            :class:`plotly.graph_objects.scatter3d.Marker` instance
            or dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        mode
            Determines the drawing mode for this scatter trace. If
            the provided `mode` includes "text" then the `text`
            elements appear at the coordinates. Otherwise, the
            `text` elements appear on hover. If there are less than
            20 points and the trace is not stacked then the default
            is "lines+markers". Otherwise, "lines".
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        projection
            :class:`plotly.graph_objects.scatter3d.Projection`
            instance or dict with compatible properties
        scene
            Sets a reference between this trace's 3D coordinate
            system and a 3D scene. If "scene" (the default value),
            the (x,y,z) coordinates refer to `layout.scene`. If
            "scene2", the (x,y,z) coordinates refer to
            `layout.scene2`, and so on.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        stream
            :class:`plotly.graph_objects.scatter3d.Stream` instance
            or dict with compatible properties
        surfaceaxis
            If "-1", the scatter points are not fill with a surface
            If 0, 1, 2, the scatter points are filled with a
            Delaunay surface about the x, y, z respectively.
        surfacecolor
            Sets the surface fill color.
        text
            Sets text elements associated with each (x,y,z)
            triplet. If a single string, the same string appears
            over all the data points. If an array of string, the
            items are mapped in order to the this trace's (x,y,z)
            coordinates. If trace `hoverinfo` contains a "text"
            flag and "hovertext" is not set, these elements will be
            seen in the hover labels.
        textfont
            Sets the text font.
        textposition
            Sets the positions of the `text` elements with respects
            to the (x,y) coordinates.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        x
            Sets the x coordinates.
        xcalendar
            Sets the calendar system to use with `x` date data.
        xhoverformat
            Sets the hover text formatting rulefor `x`  using d3
            formatting mini-languages which are very similar to
            those in Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display *09~15~23.46*By default the values are
            formatted using `xaxis.hoverformat`.
        xsrc
            Sets the source reference on Chart Studio Cloud for
            `x`.
        y
            Sets the y coordinates.
        ycalendar
            Sets the calendar system to use with `y` date data.
        yhoverformat
            Sets the hover text formatting rulefor `y`  using d3
            formatting mini-languages which are very similar to
            those in Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display *09~15~23.46*By default the values are
            formatted using `yaxis.hoverformat`.
        ysrc
            Sets the source reference on Chart Studio Cloud for
            `y`.
        z
            Sets the z coordinates.
        zcalendar
            Sets the calendar system to use with `z` date data.
        zhoverformat
            Sets the hover text formatting rulefor `z`  using d3
            formatting mini-languages which are very similar to
            those in Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display *09~15~23.46*By default the values are
            formatted using `zaxis.hoverformat`.
        zsrc
            Sets the source reference on Chart Studio Cloud for
            `z`.
        
Did you mean "mode"?

Bad property path:
clickmode
^^^^^^^^^
2025-01-17 14:02:48,540 - __main__ - ERROR - Error during analysis: Invalid property specified for object of type plotly.graph_objs.Scatter3d: 'clickmode'

Did you mean "mode"?

    Valid properties:
        connectgaps
            Determines whether or not gaps (i.e. {nan} or missing
            values) in the provided data arrays are connected.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        error_x
            :class:`plotly.graph_objects.scatter3d.ErrorX` instance
            or dict with compatible properties
        error_y
            :class:`plotly.graph_objects.scatter3d.ErrorY` instance
            or dict with compatible properties
        error_z
            :class:`plotly.graph_objects.scatter3d.ErrorZ` instance
            or dict with compatible properties
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.scatter3d.Hoverlabel`
            instance or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available.  Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets text elements associated with each (x,y,z)
            triplet. If a single string, the same string appears
            over all the data points. If an array of string, the
            items are mapped in order to the this trace's (x,y,z)
            coordinates. To be seen, trace `hoverinfo` must contain
            a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.scatter3d.Legendgrouptitle
            ` instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        line
            :class:`plotly.graph_objects.scatter3d.Line` instance
            or dict with compatible properties
        marker
            :class:`plotly.graph_objects.scatter3d.Marker` instance
            or dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        mode
            Determines the drawing mode for this scatter trace. If
            the provided `mode` includes "text" then the `text`
            elements appear at the coordinates. Otherwise, the
            `text` elements appear on hover. If there are less than
            20 points and the trace is not stacked then the default
            is "lines+markers". Otherwise, "lines".
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        projection
            :class:`plotly.graph_objects.scatter3d.Projection`
            instance or dict with compatible properties
        scene
            Sets a reference between this trace's 3D coordinate
            system and a 3D scene. If "scene" (the default value),
            the (x,y,z) coordinates refer to `layout.scene`. If
            "scene2", the (x,y,z) coordinates refer to
            `layout.scene2`, and so on.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        stream
            :class:`plotly.graph_objects.scatter3d.Stream` instance
            or dict with compatible properties
        surfaceaxis
            If "-1", the scatter points are not fill with a surface
            If 0, 1, 2, the scatter points are filled with a
            Delaunay surface about the x, y, z respectively.
        surfacecolor
            Sets the surface fill color.
        text
            Sets text elements associated with each (x,y,z)
            triplet. If a single string, the same string appears
            over all the data points. If an array of string, the
            items are mapped in order to the this trace's (x,y,z)
            coordinates. If trace `hoverinfo` contains a "text"
            flag and "hovertext" is not set, these elements will be
            seen in the hover labels.
        textfont
            Sets the text font.
        textposition
            Sets the positions of the `text` elements with respects
            to the (x,y) coordinates.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        x
            Sets the x coordinates.
        xcalendar
            Sets the calendar system to use with `x` date data.
        xhoverformat
            Sets the hover text formatting rulefor `x`  using d3
            formatting mini-languages which are very similar to
            those in Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display *09~15~23.46*By default the values are
            formatted using `xaxis.hoverformat`.
        xsrc
            Sets the source reference on Chart Studio Cloud for
            `x`.
        y
            Sets the y coordinates.
        ycalendar
            Sets the calendar system to use with `y` date data.
        yhoverformat
            Sets the hover text formatting rulefor `y`  using d3
            formatting mini-languages which are very similar to
            those in Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display *09~15~23.46*By default the values are
            formatted using `yaxis.hoverformat`.
        ysrc
            Sets the source reference on Chart Studio Cloud for
            `y`.
        z
            Sets the z coordinates.
        zcalendar
            Sets the calendar system to use with `z` date data.
        zhoverformat
            Sets the hover text formatting rulefor `z`  using d3
            formatting mini-languages which are very similar to
            those in Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display *09~15~23.46*By default the values are
            formatted using `zaxis.hoverformat`.
        zsrc
            Sets the source reference on Chart Studio Cloud for
            `z`.
        
Did you mean "mode"?

Bad property path:
clickmode
^^^^^^^^^
2025-01-17 14:03:31,151 - __main__ - ERROR - Error during analysis: Invalid property specified for object of type plotly.graph_objs.Scatter3d: 'clickmode'

Did you mean "mode"?

    Valid properties:
        connectgaps
            Determines whether or not gaps (i.e. {nan} or missing
            values) in the provided data arrays are connected.
        customdata
            Assigns extra data each datum. This may be useful when
            listening to hover, click and selection events. Note
            that, "scatter" traces also appends customdata items in
            the markers DOM elements
        customdatasrc
            Sets the source reference on Chart Studio Cloud for
            `customdata`.
        error_x
            :class:`plotly.graph_objects.scatter3d.ErrorX` instance
            or dict with compatible properties
        error_y
            :class:`plotly.graph_objects.scatter3d.ErrorY` instance
            or dict with compatible properties
        error_z
            :class:`plotly.graph_objects.scatter3d.ErrorZ` instance
            or dict with compatible properties
        hoverinfo
            Determines which trace information appear on hover. If
            `none` or `skip` are set, no information is displayed
            upon hovering. But, if `none` is set, click and hover
            events are still fired.
        hoverinfosrc
            Sets the source reference on Chart Studio Cloud for
            `hoverinfo`.
        hoverlabel
            :class:`plotly.graph_objects.scatter3d.Hoverlabel`
            instance or dict with compatible properties
        hovertemplate
            Template string used for rendering the information that
            appear on hover box. Note that this will override
            `hoverinfo`. Variables are inserted using %{variable},
            for example "y: %{y}" as well as %{xother}, {%_xother},
            {%_xother_}, {%xother_}. When showing info for several
            points, "xother" will be added to those with different
            x positions from the first point. An underscore before
            or after "(x|y)other" will add a space on that side,
            only when this field is shown. Numbers are formatted
            using d3-format's syntax %{variable:d3-format}, for
            example "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. The variables available in
            `hovertemplate` are the ones emitted as event data
            described at this link
            https://plotly.com/javascript/plotlyjs-events/#event-
            data. Additionally, every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available.  Anything contained in tag `<extra>` is
            displayed in the secondary box, for example
            "<extra>{fullData.name}</extra>". To hide the secondary
            box completely, use an empty tag `<extra></extra>`.
        hovertemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `hovertemplate`.
        hovertext
            Sets text elements associated with each (x,y,z)
            triplet. If a single string, the same string appears
            over all the data points. If an array of string, the
            items are mapped in order to the this trace's (x,y,z)
            coordinates. To be seen, trace `hoverinfo` must contain
            a "text" flag.
        hovertextsrc
            Sets the source reference on Chart Studio Cloud for
            `hovertext`.
        ids
            Assigns id labels to each datum. These ids for object
            constancy of data points during animation. Should be an
            array of strings, not numbers or any other type.
        idssrc
            Sets the source reference on Chart Studio Cloud for
            `ids`.
        legend
            Sets the reference to a legend to show this trace in.
            References to these legends are "legend", "legend2",
            "legend3", etc. Settings for these legends are set in
            the layout, under `layout.legend`, `layout.legend2`,
            etc.
        legendgroup
            Sets the legend group for this trace. Traces and shapes
            part of the same legend group hide/show at the same
            time when toggling legend items.
        legendgrouptitle
            :class:`plotly.graph_objects.scatter3d.Legendgrouptitle
            ` instance or dict with compatible properties
        legendrank
            Sets the legend rank for this trace. Items and groups
            with smaller ranks are presented on top/left side while
            with "reversed" `legend.traceorder` they are on
            bottom/right side. The default legendrank is 1000, so
            that you can use ranks less than 1000 to place certain
            items before all unranked items, and ranks greater than
            1000 to go after all unranked items. When having
            unranked or equal rank items shapes would be displayed
            after traces i.e. according to their order in data and
            layout.
        legendwidth
            Sets the width (in px or fraction) of the legend for
            this trace.
        line
            :class:`plotly.graph_objects.scatter3d.Line` instance
            or dict with compatible properties
        marker
            :class:`plotly.graph_objects.scatter3d.Marker` instance
            or dict with compatible properties
        meta
            Assigns extra meta information associated with this
            trace that can be used in various text attributes.
            Attributes such as trace `name`, graph, axis and
            colorbar `title.text`, annotation `text`
            `rangeselector`, `updatemenues` and `sliders` `label`
            text all support `meta`. To access the trace `meta`
            values in an attribute in the same trace, simply use
            `%{meta[i]}` where `i` is the index or key of the
            `meta` item in question. To access trace `meta` in
            layout attributes, use `%{data[n[.meta[i]}` where `i`
            is the index or key of the `meta` and `n` is the trace
            index.
        metasrc
            Sets the source reference on Chart Studio Cloud for
            `meta`.
        mode
            Determines the drawing mode for this scatter trace. If
            the provided `mode` includes "text" then the `text`
            elements appear at the coordinates. Otherwise, the
            `text` elements appear on hover. If there are less than
            20 points and the trace is not stacked then the default
            is "lines+markers". Otherwise, "lines".
        name
            Sets the trace name. The trace name appears as the
            legend item and on hover.
        opacity
            Sets the opacity of the trace.
        projection
            :class:`plotly.graph_objects.scatter3d.Projection`
            instance or dict with compatible properties
        scene
            Sets a reference between this trace's 3D coordinate
            system and a 3D scene. If "scene" (the default value),
            the (x,y,z) coordinates refer to `layout.scene`. If
            "scene2", the (x,y,z) coordinates refer to
            `layout.scene2`, and so on.
        showlegend
            Determines whether or not an item corresponding to this
            trace is shown in the legend.
        stream
            :class:`plotly.graph_objects.scatter3d.Stream` instance
            or dict with compatible properties
        surfaceaxis
            If "-1", the scatter points are not fill with a surface
            If 0, 1, 2, the scatter points are filled with a
            Delaunay surface about the x, y, z respectively.
        surfacecolor
            Sets the surface fill color.
        text
            Sets text elements associated with each (x,y,z)
            triplet. If a single string, the same string appears
            over all the data points. If an array of string, the
            items are mapped in order to the this trace's (x,y,z)
            coordinates. If trace `hoverinfo` contains a "text"
            flag and "hovertext" is not set, these elements will be
            seen in the hover labels.
        textfont
            Sets the text font.
        textposition
            Sets the positions of the `text` elements with respects
            to the (x,y) coordinates.
        textpositionsrc
            Sets the source reference on Chart Studio Cloud for
            `textposition`.
        textsrc
            Sets the source reference on Chart Studio Cloud for
            `text`.
        texttemplate
            Template string used for rendering the information text
            that appear on points. Note that this will override
            `textinfo`. Variables are inserted using %{variable},
            for example "y: %{y}". Numbers are formatted using
            d3-format's syntax %{variable:d3-format}, for example
            "Price: %{y:$.2f}".
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format
            for details on the formatting syntax. Dates are
            formatted using d3-time-format's syntax
            %{variable|d3-time-format}, for example "Day:
            %{2019-01-01|%A}". https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format for details on the
            date formatting syntax. Every attributes that can be
            specified per-point (the ones that are `arrayOk: true`)
            are available.
        texttemplatesrc
            Sets the source reference on Chart Studio Cloud for
            `texttemplate`.
        uid
            Assign an id to this trace, Use this to provide object
            constancy between traces during animations and
            transitions.
        uirevision
            Controls persistence of some user-driven changes to the
            trace: `constraintrange` in `parcoords` traces, as well
            as some `editable: true` modifications such as `name`
            and `colorbar.title`. Defaults to `layout.uirevision`.
            Note that other user-driven trace attribute changes are
            controlled by `layout` attributes: `trace.visible` is
            controlled by `layout.legend.uirevision`,
            `selectedpoints` is controlled by
            `layout.selectionrevision`, and `colorbar.(x|y)`
            (accessible with `config: {editable: true}`) is
            controlled by `layout.editrevision`. Trace changes are
            tracked by `uid`, which only falls back on trace index
            if no `uid` is provided. So if your app can add/remove
            traces before the end of the `data` array, such that
            the same trace has a different index, you can still
            preserve user-driven changes if you give each trace a
            `uid` that stays with it as it moves.
        visible
            Determines whether or not this trace is visible. If
            "legendonly", the trace is not drawn, but can appear as
            a legend item (provided that the legend itself is
            visible).
        x
            Sets the x coordinates.
        xcalendar
            Sets the calendar system to use with `x` date data.
        xhoverformat
            Sets the hover text formatting rulefor `x`  using d3
            formatting mini-languages which are very similar to
            those in Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display *09~15~23.46*By default the values are
            formatted using `xaxis.hoverformat`.
        xsrc
            Sets the source reference on Chart Studio Cloud for
            `x`.
        y
            Sets the y coordinates.
        ycalendar
            Sets the calendar system to use with `y` date data.
        yhoverformat
            Sets the hover text formatting rulefor `y`  using d3
            formatting mini-languages which are very similar to
            those in Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display *09~15~23.46*By default the values are
            formatted using `yaxis.hoverformat`.
        ysrc
            Sets the source reference on Chart Studio Cloud for
            `y`.
        z
            Sets the z coordinates.
        zcalendar
            Sets the calendar system to use with `z` date data.
        zhoverformat
            Sets the hover text formatting rulefor `z`  using d3
            formatting mini-languages which are very similar to
            those in Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display *09~15~23.46*By default the values are
            formatted using `zaxis.hoverformat`.
        zsrc
            Sets the source reference on Chart Studio Cloud for
            `z`.
        
Did you mean "mode"?

Bad property path:
clickmode
^^^^^^^^^
2025-01-17 14:07:33,843 - __main__ - ERROR - Error in display_element_details: 'int' object is not subscriptable
2025-01-17 14:07:52,974 - __main__ - ERROR - Error in display_element_details: 'int' object is not subscriptable
2025-01-17 14:09:17,702 - __main__ - INFO - Click data received: {'x': 10.000000000000002, 'y': 17.32050807568877, 'z': 15, 'curveNumber': 2, 'pointNumber': 1, 'bbox': {'x0': 559.4305600998487, 'x1': 559.4305600998487, 'y0': 1123.9172643962297, 'y1': 1123.9172643962297}}
2025-01-17 14:09:34,405 - __main__ - INFO - Click data received: {'x': 10.000000000000002, 'y': 17.32050807568877, 'z': 15, 'curveNumber': 2, 'pointNumber': 1, 'bbox': {'x0': 578.0810777271681, 'x1': 578.0810777271681, 'y0': 1134.6681504205696, 'y1': 1134.6681504205696}}
2025-01-17 14:09:44,472 - __main__ - INFO - Click data received: {'x': 10.000000000000002, 'y': 17.32050807568877, 'z': 15, 'curveNumber': 2, 'pointNumber': 1, 'bbox': {'x0': 631.7999579038487, 'x1': 631.7999579038487, 'y0': 1154.68341691116, 'y1': 1154.68341691116}}
2025-01-17 14:10:07,148 - __main__ - INFO - Click data received: {'x': 10.000000000000002, 'y': 17.32050807568877, 'z': 0, 'curveNumber': 2, 'pointNumber': 0, 'bbox': {'x0': 557.4381985805079, 'x1': 557.4381985805079, 'y0': 1212.898513978615, 'y1': 1212.898513978615}}
2025-01-17 14:13:02,156 - __main__ - INFO - Click data received: {'x': 17.320508075688775, 'y': 9.999999999999998, 'z': 15, 'curveNumber': 1, 'pointNumber': 1, 'bbox': {'x0': 561.0522273622528, 'x1': 561.0522273622528, 'y0': 913.5922380450255, 'y1': 913.5922380450255}}
2025-01-17 14:15:07,772 - __main__ - INFO - Click data received: {'x': 17.320508075688775, 'y': 9.999999999999998, 'z': 15, 'curveNumber': 1, 'pointNumber': 1, 'bbox': {'x0': 298.5926697670887, 'x1': 298.5926697670887, 'y0': 329.6218579690783, 'y1': 329.6218579690783}}
2025-01-17 14:15:07,875 - __main__ - INFO - Click data received: {'x': 17.320508075688775, 'y': 9.999999999999998, 'z': 15, 'curveNumber': 1, 'pointNumber': 1, 'bbox': {'x0': 298.59797508215246, 'x1': 298.59797508215246, 'y0': 329.95816905129504, 'y1': 329.95816905129504}}
2025-01-17 14:16:01,024 - __main__ - INFO - Click data received: {'x': 17.320508075688775, 'y': 9.999999999999998, 'z': 30, 'curveNumber': 1, 'pointNumber': 1, 'bbox': {'x0': 372.41224117581567, 'x1': 372.41224117581567, 'y0': 129.32627637112134, 'y1': 129.32627637112134}}
2025-01-17 14:16:15,632 - __main__ - INFO - Click data received: {'x': 20, 'y': 0, 'z': 30, 'curveNumber': 0, 'pointNumber': 1, 'bbox': {'x0': 178.7984650143191, 'x1': 178.7984650143191, 'y0': 127.08846015253731, 'y1': 127.08846015253731}}
2025-01-22 18:35:04,780 - dash.dash - INFO - Dash is running on http://127.0.0.1:8052/

2025-01-22 18:42:13,557 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:13] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:13,570 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:13] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:13,570 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:13] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:13,578 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:13] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:13,591 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:13] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:13,597 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:13] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:13,599 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:13] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:13,862 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:13] "GET /_dash-layout HTTP/1.1" 200 -
2025-01-22 18:42:13,862 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:13] "GET /_dash-dependencies HTTP/1.1" 200 -
2025-01-22 18:42:14,322 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:14] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:16,688 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:16] "POST /_dash-update-component HTTP/1.1" 200 -
2025-01-22 18:42:17,715 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:17] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:20,322 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:20] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:23,307 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:23] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:26,313 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:26] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:29,309 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:29] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:32,318 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:32] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:35,303 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:35] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:38,311 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:38] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:41,316 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:41] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:44,325 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:44] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:47,375 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:47] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:50,319 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:50] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:53,314 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:53] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:56,308 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:56] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:42:59,304 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:42:59] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:43:02,315 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:43:02] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:43:05,304 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:43:05] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:43:08,311 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:43:08] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:43:11,306 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:43:11] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:43:14,321 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:43:14] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:43:17,305 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:43:17] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:43:20,324 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:43:20] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:43:23,312 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:43:23] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:43:26,312 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:43:26] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:43:29,319 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:43:29] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:43:32,314 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:43:32] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:43:35,319 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:43:35] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:43:38,303 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:43:38] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:43:41,302 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:43:41] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:43:44,322 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:43:44] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:43:47,308 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:43:47] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:44:00,325 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:44:00] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:45:00,317 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:45:00] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:46:00,319 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:46:00] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:46:55,561 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:46:55] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:46:55,982 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:46:55] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:46:58,989 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:46:58] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:47:01,988 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:47:01] "GET /_reload-hash HTTP/1.1" 200 -
2025-01-22 18:47:02,721 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:47:02] "GET / HTTP/1.1" 200 -
2025-01-22 18:47:02,806 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:47:02] "[36mGET /assets/custom.css?m=1737095600.4784482 HTTP/1.1[0m" 304 -
2025-01-22 18:47:02,935 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:47:02] "GET /_dash-component-suites/dash/deps/react-dom@16.v2_18_2m1737095094.14.0.min.js HTTP/1.1" 200 -
2025-01-22 18:47:02,947 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:47:02] "GET /_dash-component-suites/dash/deps/prop-types@15.v2_18_2m1737095094.8.1.min.js HTTP/1.1" 200 -
2025-01-22 18:47:02,974 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:47:02] "GET /_dash-component-suites/dash/deps/react@16.v2_18_2m1737095094.14.0.min.js HTTP/1.1" 200 -
2025-01-22 18:47:03,140 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:47:03] "GET /_dash-component-suites/dash/dash-renderer/build/dash_renderer.v2_18_2m1737095094.min.js HTTP/1.1" 200 -
2025-01-22 18:47:03,359 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:47:03] "GET /_dash-layout HTTP/1.1" 200 -
2025-01-22 18:47:03,365 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:47:03] "GET /_dash-dependencies HTTP/1.1" 200 -
2025-01-22 18:47:03,447 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:47:03] "GET /_favicon.ico?v=2.18.2 HTTP/1.1" 200 -
2025-01-22 18:47:03,562 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:47:03] "[36mGET /_dash-component-suites/dash/dcc/async-graph.js HTTP/1.1[0m" 304 -
2025-01-22 18:47:03,562 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:47:03] "[36mGET /_dash-component-suites/dash/dcc/async-dropdown.js HTTP/1.1[0m" 304 -
2025-01-22 18:47:03,652 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:47:03] "POST /_dash-update-component HTTP/1.1" 200 -
2025-01-22 18:47:03,723 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:47:03] "[36mGET /_dash-component-suites/plotly/package_data/plotly.min.js HTTP/1.1[0m" 304 -
2025-01-22 18:48:27,960 - dash.dash - INFO - Dash is running on http://127.0.0.1:8052/

2025-01-22 18:48:27,994 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8052
2025-01-22 18:48:27,994 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-01-22 18:48:31,061 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:48:31] "GET / HTTP/1.1" 200 -
2025-01-22 18:48:31,133 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:48:31] "[36mGET /assets/custom.css?m=1737095600.4784482 HTTP/1.1[0m" 304 -
2025-01-22 18:48:31,449 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:48:31] "GET /_dash-layout HTTP/1.1" 200 -
2025-01-22 18:48:31,451 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:48:31] "GET /_dash-dependencies HTTP/1.1" 200 -
2025-01-22 18:48:31,502 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:48:31] "[36mGET /_dash-component-suites/dash/dcc/async-dropdown.js HTTP/1.1[0m" 304 -
2025-01-22 18:48:31,502 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:48:31] "[36mGET /_dash-component-suites/dash/dcc/async-graph.js HTTP/1.1[0m" 304 -
2025-01-22 18:48:31,534 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:48:31] "[36mGET /_dash-component-suites/plotly/package_data/plotly.min.js HTTP/1.1[0m" 304 -
2025-01-22 18:48:31,771 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:48:31] "GET /_dash-component-suites/dash/dcc/async-slider.js HTTP/1.1" 200 -
2025-01-22 18:48:32,861 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:48:32] "POST /_dash-update-component HTTP/1.1" 200 -
2025-01-22 18:48:42,998 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:48:42] "POST /_dash-update-component HTTP/1.1" 200 -
2025-01-22 18:48:45,510 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:48:45] "POST /_dash-update-component HTTP/1.1" 200 -
2025-01-22 18:50:50,112 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:50:50] "GET / HTTP/1.1" 200 -
2025-01-22 18:50:50,211 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:50:50] "[36mGET /assets/custom.css?m=1737095600.4784482 HTTP/1.1[0m" 304 -
2025-01-22 18:50:50,378 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:50:50] "GET /_dash-layout HTTP/1.1" 200 -
2025-01-22 18:50:50,386 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:50:50] "GET /_dash-dependencies HTTP/1.1" 200 -
2025-01-22 18:50:50,422 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:50:50] "GET /_favicon.ico?v=2.18.2 HTTP/1.1" 200 -
2025-01-22 18:50:50,450 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:50:50] "[36mGET /_dash-component-suites/dash/dcc/async-dropdown.js HTTP/1.1[0m" 304 -
2025-01-22 18:50:50,458 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:50:50] "[36mGET /_dash-component-suites/dash/dcc/async-slider.js HTTP/1.1[0m" 304 -
2025-01-22 18:50:50,466 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:50:50] "[36mGET /_dash-component-suites/dash/dcc/async-graph.js HTTP/1.1[0m" 304 -
2025-01-22 18:50:50,553 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:50:50] "[36mGET /_dash-component-suites/plotly/package_data/plotly.min.js HTTP/1.1[0m" 304 -
2025-01-22 18:50:51,245 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:50:51] "POST /_dash-update-component HTTP/1.1" 200 -
2025-01-22 18:53:04,405 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:53:04] "GET / HTTP/1.1" 200 -
2025-01-22 18:53:04,509 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:53:04] "[36mGET /assets/custom.css?m=1737095600.4784482 HTTP/1.1[0m" 304 -
2025-01-22 18:53:04,613 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:53:04] "GET /_dash-layout HTTP/1.1" 200 -
2025-01-22 18:53:04,621 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:53:04] "GET /_dash-dependencies HTTP/1.1" 200 -
2025-01-22 18:53:04,647 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:53:04] "GET /_favicon.ico?v=2.18.2 HTTP/1.1" 200 -
2025-01-22 18:53:04,687 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:53:04] "[36mGET /_dash-component-suites/dash/dcc/async-dropdown.js HTTP/1.1[0m" 304 -
2025-01-22 18:53:04,687 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:53:04] "[36mGET /_dash-component-suites/dash/dcc/async-slider.js HTTP/1.1[0m" 304 -
2025-01-22 18:53:04,696 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:53:04] "[36mGET /_dash-component-suites/dash/dcc/async-graph.js HTTP/1.1[0m" 304 -
2025-01-22 18:53:04,737 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:53:04] "[36mGET /_dash-component-suites/plotly/package_data/plotly.min.js HTTP/1.1[0m" 304 -
2025-01-22 18:53:05,557 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:53:05] "POST /_dash-update-component HTTP/1.1" 200 -
2025-01-22 18:58:18,760 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:18] "GET / HTTP/1.1" 200 -
2025-01-22 18:58:18,867 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:18] "[36mGET /assets/custom.css?m=1737095600.4784482 HTTP/1.1[0m" 304 -
2025-01-22 18:58:19,118 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:19] "GET /_dash-layout HTTP/1.1" 200 -
2025-01-22 18:58:19,118 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:19] "GET /_dash-dependencies HTTP/1.1" 200 -
2025-01-22 18:58:19,151 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:19] "GET /_favicon.ico?v=2.18.2 HTTP/1.1" 200 -
2025-01-22 18:58:19,202 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:19] "[36mGET /_dash-component-suites/dash/dcc/async-slider.js HTTP/1.1[0m" 304 -
2025-01-22 18:58:19,202 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:19] "[36mGET /_dash-component-suites/dash/dcc/async-graph.js HTTP/1.1[0m" 304 -
2025-01-22 18:58:19,202 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:19] "[36mGET /_dash-component-suites/dash/dcc/async-dropdown.js HTTP/1.1[0m" 304 -
2025-01-22 18:58:19,304 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:19] "[36mGET /_dash-component-suites/plotly/package_data/plotly.min.js HTTP/1.1[0m" 304 -
2025-01-22 18:58:19,943 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:19] "POST /_dash-update-component HTTP/1.1" 200 -
2025-01-22 18:58:35,752 - dash.dash - INFO - Dash is running on http://127.0.0.1:8052/

2025-01-22 18:58:35,779 - werkzeug - INFO - [31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:8052
2025-01-22 18:58:35,779 - werkzeug - INFO - [33mPress CTRL+C to quit[0m
2025-01-22 18:58:37,470 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:37] "GET / HTTP/1.1" 200 -
2025-01-22 18:58:37,542 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:37] "[36mGET /assets/custom.css?m=1737095600.4784482 HTTP/1.1[0m" 304 -
2025-01-22 18:58:37,833 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:37] "GET /_dash-layout HTTP/1.1" 200 -
2025-01-22 18:58:37,833 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:37] "GET /_dash-dependencies HTTP/1.1" 200 -
2025-01-22 18:58:37,879 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:37] "[36mGET /_dash-component-suites/dash/dcc/async-dropdown.js HTTP/1.1[0m" 304 -
2025-01-22 18:58:37,879 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:37] "[36mGET /_dash-component-suites/dash/dcc/async-slider.js HTTP/1.1[0m" 304 -
2025-01-22 18:58:37,891 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:37] "[36mGET /_dash-component-suites/dash/dcc/async-graph.js HTTP/1.1[0m" 304 -
2025-01-22 18:58:37,916 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:37] "[36mGET /_dash-component-suites/plotly/package_data/plotly.min.js HTTP/1.1[0m" 304 -
2025-01-22 18:58:38,901 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:58:38] "POST /_dash-update-component HTTP/1.1" 200 -
2025-01-22 18:59:06,697 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:59:06] "POST /_dash-update-component HTTP/1.1" 200 -
2025-01-22 18:59:40,960 - werkzeug - INFO - 127.0.0.1 - - [22/Jan/2025 18:59:40] "POST /_dash-update-component HTTP/1.1" 200 -
